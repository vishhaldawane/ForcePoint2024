#include <iostream>
using namespace std;


int main() {

    return 0;
}




	CPP

	C++ programming language

			Bjarne Stroustup
			1980

	
	1st Gen Assembly Machine
	|
	C
	Fortan
	PASCAL
	| 2nd Gen
	POPS = Procedure oriented programming system

		top to bottom approach

		
			procedure <-- data

			int global1=190;

			void withdraw() { }
			int global2=290;
			void deposit() { }
			int global3=390;
			void fun() {}
			void foo() { }
			main()
			{
				int local1=190;
			}
			
		

	C++
	3rd Gen
	OOPS = Object oriented programming system

			struct SavingsAccount 
			{ <-- starting point
				int global1=190;
					+
				void withdraw() { }
				void deposit() { }
			}; <-- ending point

			void fun() {}
			void foo() { }

			main()
			{
				int local1=190;
			}
			
	Java
	4th Gen 




	C				C++
	|				|
	int i				int i

	struct SavingsAccount {		struct SavingsAccount {
		int balance;			private: int balance;
		void withdraw(){} X		public: void deposit(){ }
	}				} 
					default access specifiers is public

					SavingsAccount sa;
					sa.balance=9820443464

					class SavingsAccount {
						int balance;
						public:
						void deposit(int b) {
							balance = b;
						}
					};
					SavingsAccount sa;
					sa.balance=9020443464; <-- not allowed
					sa.deposit(5000); // <-- not allowed



OOPS concepts
----------------
	
	1. Abstraction
		it is the "what is?" part of an object
		what is an ATM?

		realtime entity in the computer memory 
		identified by its primary key


		hiding the complexity of an object

		focus on the working functionality of it

	
			- data hidden
			- procedure hidden
			- internal structure hidden

 
	2. Encapsulation
		it is the "how is it?" part of an object

		how the ATM is functioning ?

			- data encapsulation
				- private data
			- bind the data with concerned functions


	



	3. Polymorphism

		ability to business entity to have many forms

		a. function overloading
			 - define multiple function with same name
				but differentiated based on 
			i) data type
			ii) number of arguments
			iii) sequence of type of arguments

		b. class extention
				Doctor
				|
			-------------
			|
			Surgeon
			|
		HeartSurgeon


	4. Inheritance





	5. Object communication



	class			vs		object
	|					|
	design of an object		instance of a class

	blue print of a house		the actual house(s)

	logical				physical

		------------------------->
	thoughtfull			vscode, notepad, msvs
		emotions		eclipse, vi

	class SavingsAccount {		SavingsAccount saObj;
		data
		+
		functions
	}
	class Fruit			Fruit mango;
	{				Fruit apple;
		string color;		Fruit jackfruit;
		string taste;		Fruit orange;
		float weight;
		boolean ripe;
		float cost;
		set/get/print
	};

				    color  taste  weight  ripe
		+------------------> yellow sweet 250.4   true
		|
		mango

					set/get/print


				    color  taste  weight  ripe
		+------------------> red   sweet  150.4   false
		|
		apple

				    color  	taste  weight  ripe
		+------------------> paleyellow sweet  2250    true
		|
		jackfruit	
	











































