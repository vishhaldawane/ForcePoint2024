#include <iostream>
using namespace std;


int main() {

    return 0;
}




	CPP

	C++ programming language

			Bjarne Stroustup
			1980

	
	1st Gen Assembly Machine
	|
	C
	Fortan
	PASCAL
	| 2nd Gen
	POPS = Procedure oriented programming system

		top to bottom approach

		
			procedure <-- data

			int global1=190;

			void withdraw() { }
			int global2=290;
			void deposit() { }
			int global3=390;
			void fun() {}
			void foo() { }
			main()
			{
				int local1=190;
			}
			
		

	C++
	3rd Gen
	OOPS = Object oriented programming system

			struct SavingsAccount 
			{ <-- starting point
				int global1=190;
					+
				void withdraw() { }
				void deposit() { }
			}; <-- ending point

			void fun() {}
			void foo() { }

			main()
			{
				int local1=190;
			}
			
	Java
	4th Gen 




	C				C++
	|				|
	int i				int i

	struct SavingsAccount {		struct SavingsAccount {
		int balance;			private: int balance;
		void withdraw(){} X		public: void deposit(){ }
	}				} 
					default access specifiers is public

					SavingsAccount sa;
					sa.balance=9820443464

					class SavingsAccount {
						int balance;
						public:
						void deposit(int b) {
							balance = b;
						}
					};
					SavingsAccount sa;
					sa.balance=9020443464; <-- not allowed
					sa.deposit(5000); // <-- not allowed



OOPS concepts
----------------
	
	1. Abstraction
		it is the "what is?" part of an object
		what is an ATM?

		realtime entity in the computer memory 
		identified by its primary key


		hiding the complexity of an object

		focus on the working functionality of it

	
			- data hidden
			- procedure hidden
			- internal structure hidden

 
	2. Encapsulation
		it is the "how is it?" part of an object

		how the ATM is functioning ?

			- data encapsulation
				- private data
			- bind the data with concerned functions


	



	3. Polymorphism

		ability to business entity to have many forms

		a. function overloading
			 - define multiple function with same name
				but differentiated based on 
			i) data type
			ii) number of arguments
			iii) sequence of type of arguments

		b. class extention
				Doctor
				|diagnose() ENT
			-------------
			|
			Surgeon
			|diagnose() CT
		HeartSurgeon
			|diagnose() ECG 

		c. function overriding
			- let derive class redefine the function of its
			parent ( by declaring it as virtual )

			virtual void dianose() { }



	4. Inheritance





	5. Object communication



	class			vs		object
	|					|
	design of an object		instance of a class

	blue print of a house		the actual house(s)

	logical				physical

		------------------------->
	thoughtfull			vscode, notepad, msvs
		emotions		eclipse, vi

	class SavingsAccount {		SavingsAccount saObj;
		data
		+
		functions
	}
	class Fruit			Fruit mango;
	{				Fruit apple;
		string color;		Fruit jackfruit;
		string taste;		Fruit orange;
		float weight;
		boolean ripe;
		float cost;
		set/get/print
	};

				    color  taste  weight  ripe
		+------------------> yellow sweet 250.4   true
		|
		mango

					set/get/print


				    color  taste  weight  ripe
		+------------------> red   sweet  150.4   false
		|
		apple

				    color  	taste  weight  ripe
		+------------------> paleyellow sweet  2250    true
		|
		jackfruit	
	


























		compile time binding | early bindingg
		-----------------------
		doctor.diagnose();
		surgeon.diagnose();
		heartSurgeon.diagnose();

		--------------------------
		run time binding- late binding

	Doctor *ptr;
	
		ptr=&doctor;
	ptr->diagnose();
	
		ptr = &surgeon();
	ptr->diagnose();

		ptr = &heartSurgeon;
	ptr->diagnose();



			Association
				|
		--------------------------------
		|	|	|	|
		isA	hasA	usesA	producesA
		<-structural->  <-- functional--->

ENTERPRISE APPLICATION FEATURES

1. network logic
2. high availability logic
3. threading
4. pooling
5. caching
6. transaction
7. security

	class Machine
	{

	}
	class WashingMachine : public Machine //isA
	{
		WashingTub washTub; //hasA
		WashProgramPanel panel;

		Laundry wash(WashingPowder wp, Water w, 
			Electricity e, Cloth cloths[])
		{
			..for...
			rinse();
			Laundry laundry;
			laundry.setter..(waterbill,powder, elect...)
			return laundry; // 10+20+20
		}

		private: void rinse() {
			..for...
			spin();
		}
		private: void spin(){
			..for..
		}
	}




	class Pen
	{
	}
	class SketchPen : public Pen //isA
	{
		
	}

	class Person
	{
	}
	class SketchPenArtist : public Person //isA
	{
		SketchPen thePen; //hasA

		//producesA       usesA     usesA         usesA
		Drawing   draw(Face face, Background b, Theme theme) {
		
			Drawing drawing;
			drawing.setters.....face, background,theme
			return drawing;
		}

	}
	class Camera { }
	class VideoCamera : public Camera { }

	class Photographer : public Person //isA
	{
		Camera camera; // hasA

		Photo click(Face face,Scene scene) {
			..
			..
			Photo photo;
			photo.setters for face, scene....
			return photo;
		}
	}
	class Cinematographer : public Photographer //hasA
	{
		VideoCamera vidCamera; //hasA

		VideoClip shooting(Motion m, MovingEntities me) {
			
			VideoClip clip;
			click(f,s);
			clip.setters for m, me;
			return clip;
		}
	}

	class Magician : public Person //isA
	{
		MagicWand theWand; //hasA
		Tricks trick1, trick2......100s...
		
		Magic scientificTrick(Curtain curtain, Board board) {
			Magic magic;
			return magic;
		}
	}
	class HatMagician : public Magician
	{
	}




-------------------------------------------
Agenda

	Pointer to Object
	Reference Variables
	Pointer to Array of Object
	Virtual Base Classes
		- multiple level inheritance
	Templates
		function
		classes
	File handling
		Object serialization process

	















