

	Jack Canfield

7 Habits of Highly Effective People

	U cannot decide your future,
	But you can decide your habits,
	and your habits would decide your future.


	private victory	

1. Be Proactive 
2. Put First Thing First
	clock and compass
 
3. Begin with the END in mind
 

4 - Think WIN-WIN 

	public victory
5. Seek first to understand then to be understood
6. Synergy
7. Sharpen the SAW









			Unix Shell Scripting

Day1 Agenda :

	1. Introduction to Unix/Linux
	2. The Big picture
	2.1) features of unix
	3. Getting around the system
	4. Basic commands to deal with Files
	5. Basic commands to deal with directories
	6. The Vi editor
Day2 Agenda :
	6. Carry forward the VI editor
	7. File permissions
Day3 Agenda:
	8. File Links
		soft and hard link
	9. Various filters
		10 filters

Holiday

Day 4 Agenda:

	10. Shell Environment
	11. Environment variables
	12. the export statement
	13. Shell scripting

Day 5 Agenda:

	14. More on scripting
	15. Command line arguments
	16. Functions
	17. Interscript communication
	18. sed filter

Day 6 Agenda

	18. more on sed
	19. sort filter, uniq
	20. arrays
	21. awk filter
	22. awk scripting

Day 7 Agenda
	23. Profiles
	24. File archiving
	25. File compression




			Unix

	UNIplexed computing system
	|			|
	single			|
	machine			|
		----------------------------------
		|		|		|
		hardware	software	peopleware
		yantra		tantra		mantra
		|		|		|
	abundance 		huge set	millions 
	|			of apps
	CPU 32/64/128
	HDD 64/128/256TB
	MEMORY 64gb

	1,20,000 users
	in a second
	on IBM 


				SCO-UNIX
				| SYS III / IV / V
				| Ken Thompson
				|
		-----------------------------------------------------------------
		|		|		|		|		|
vendor		IBM		Sun/Oracle	Hp		apple		any
CPU		blackbox	SunFire/SPARC	hpseries	PowerPc		any
Os		AIX		Solaris		hp-ux		Macintosh	Linux
Kernel		Kernel(asm)							|
Shell		bash(C)	
		|		uname		uname		uname		uname
		uname
		ls		ls		ls		ls		ls
		


	Linus Torvalds 

			redhat		mandrake 	suse/linux
			|			caldera		..50
		------------------
		|		|
		linux		fedora
				..
				..
				ubuntu

Features of unix
1. Portable
2. Multiuser ( it is not a desktop/single user os)

			box
			|CPU/HDD/RAM
			|kernel is here
			|
		-----------------------------------
		|nic	|nic	|nic	|nic	|nic
		|bash	|bash	|bash	|bash	|bash
		monitor	mon	mon	mon	mon
		key	key	key	key	key
		|
		ls
3. Mutlitasking
4. Multiprocessing
5. Robust
6. 100% secured
	rwx

	in windows we cannot disable the executable ness of an executable file

		paint.exe

	chmod -x paint.out
7. multithreaded
8. Distributed



	Unix users


	1. Power User
		known as 'root' user [ administrator in windows ]
		prompt - #
		never try to login as root unless u have the password
		
	2. End user
		like any other non-root user
		prompt - $
	

uname
	uname -o
	uname -k
	uname -i
	uname -r

cal
cal -3
cal -y
ncal -M
ncal -S
cal 2 2005
cal 2024
pwd - print working directory
touch jupitor - make empty file [ if doent exist ]
mkdir myfolder 
rm jupitor [ remove a file ]
rmdir myfolder [ remove empty folder ]
date
date '+%D'



File related commands


	a. create a file

		cat > filename  [ file name must be new one ]
		data			else it would overwrite
		data			without prompt
		data
		^d

	b. view the content of the file

		cat filename

		
	c. rename the file

		mv oldname newnamme

	d. move a file

		mv sourcefile  newlocation/

	e. copy a file

		cp sourcefile newcopyName
		cp sourcefile newLocation/

	f. remove a file

		rm filename
		

Directories
--------------

	a. create a directory

		mkdir directoryname

	b. enter into the directory

		cd directoryname

	c. exit one level up
		
		cd .. [ with a space ]

	d. remove a directory

		rmdir directoryname [ it must be empty ]

		rm -rf directory [ force remove a directory ]
				  -r recursive content 

	e. rename a directory

		mv oldname newname

	f. move a directory

		mv directory newLocation/

	g. copy a directory

		cp -r directory newLocation/
	

				office
				|
			-----------------
			|		|
			inbox		outbox
			|		|
		--------------		-------------------
		|	    |		|		|
		bank	  project	vendors		suppliers




	
Unix file system structure [ internatinal standard structure ]



				/
				|
	-----------------------------------------------------------------------------------
	|	|	|	|	|	|	|	|	|	|	|
	bin	usr	sbin	etc	var	opt	tmp	lib	dev	proc	root
		|
	-------------
	|	|
	bin	sbin


1. / <-- root directory
-----------------------------
2. /bin		binaries [ executables ]
3. /sbin	system level [ single user ] binaries
4. /usr/bin	binaries [ large number ]
5. /usr/sbin	binaries [ large number ]
--------------------
6. /etc		editable text configuration
7. /var		variable data, logs, mails, spools, jobs
8. /opt		third party software /opt/java/bin/javac, /opt/oracle/bin/sql
9. /tmp		dumping ground
-----------------
10./lib		libraries [ .so files ] - same as windows DLL
11./dev		device drivers here
-----------------
12. /proc	running processes here
13. /root	home directory of admin[ root ] user
14. /home/user	home directories of all end users



	EXE project	DLL project
	|		|
	excel.c		formulas.c
	|main()	{}	|50 funs
	--------------------
	|		|
	.obj		.obj
	|		|
	.exe		.dll
	|4kb		|1mb
	run		DOESNT RUN, rather
	in		it stays on 
	RAM		HDD

	sum(A10..A30)


	OUT project	SO Project
	|		|
:	excel.c		formulas.c
	|		|
	.o		.o
	|		|
	.out		.so [ shared object ]



Vi editor
--------------


	visual editor

	vim = visual improved


	$ vi --> open a blank file
	
	$ vi abc.txt -> if the file doesnt exists, it would open it as a new one


	$ vi pqr.txt -> existing file, then open teh content for editing


	vi has various MODES, default mode is the COMMAND MODE


	$ vi
	+---------------> COMMAND MODE
	|			|
	|     [aio]------------------[:]------------------
	|	|		      |
	|	|		      |
	Esc	InsertMODE	Last Line/Ex Mode
	

	$ vi

		1. command mode
		2. press i -> insert mode
		3. type data
		4. press ESC -> command mode
		5. :w abc.txt [ save as ]
		6. :q to quit vi

	$ vi pqr.txt

		1. command mode
		2. press i
		3. edit/add the lines
		4. press ESC
		5. :wq -- write and quit vi


	$ vi pqr.txt

		1. command mode
		2. press i
		3. edit/add the lines
		4. press ESC
		5. :q! -- discard the changes and quit vi
			
	
	i -- enter into insert mode

	: -- enter into last line mode

	Esc - goback to command mode from any other mode




	:set number - enable line numbers
	:set nonumber - disable it

	:500
	:1
	:$ --- go to the last line

	w - goes to the beginning of every successive word in forward direction
	e - goes to the end of every successive word in forward direction
	
	b - goes to the beginning of every successive word in backward direction

	50w - goes in the foward to the 50th word from the current cursor

	dw - deletes the current word
	5dw - delete 5 words from the cursor

	dd - delete the current line
	5dd - delete 5 lines

	u - to undo the last action
	5u - to undeo last 5 action

		copy			cut
		|			|
	char    y			x
	3chars	3y			3x
	word	yw			dw
	3word	3yw			3dw
	line	yy			dd
	3 lines	3yy			3dd
		|			|
		------------------------
			   |
	paste		   p
     5 time paste         5p



Search a word
---------------

		/wordToSearch  - searches a word in forward direction

		?wordToSearch - searches a word in backward direction

		whole word search

		/the <-- searches the word everywhere

		/^the	<-- searches at the start of the line

		/\<the\>

		n - searches the next occurance
		N - searches the prev occurance

		

		:set hls <-- highlight selection on

Search and Replace
--------------------

		first decide what to replace
			and from what region [ line or range of lines ]
			and first occurence or multiple occurences


		:s/a/A


		:s means substitute [ replace ]
		/a -- search string a
		/A -- to replace with this string

		if line number not given then current line is considered
		if occurences not given, then only first occurence would be done


		:s/a/A -- replace a with A on the current line first occurence
		:12s/a/A - 12th line, first occurence
		:12s/a/A/g - 12th line, all occurences

		:5,12s/a/A - replace all a with A from line 5 to 12 first occurence
		:5,12s/a/A/g - replace all a with A from line 5 to 12 all occurences


		:1,$s/a/A   - complete document for the first sccurence
		:1,$s/a/A/g - complete document for all the occurences



		:%s/a/A   - complete document for the first sccurence
		:%s/a/A/g - complete document for all the occurences
	
		:%s/a/A/gc 
			c - confirmation

			y	n	a	q	l
			|	|	|	|	|
			do	NO	all	quit	do the current replacement
							and leave it

			^E ^Y -- to scroll up and down
			scroll facility is given to discriminate the 
			replacement decisions based on unseen lines



	File permissions
	-------------------
			Basic security model

	3 types of users
	-----------------
	user - owner of the file/directory denoted via - u
	group - logical collection of trusted user(s) -  g
	other - neither the user nor the group member -  o

	every user has a primary group

	and a user can belong to multiple secondary groups

	other is risky, any internet user, unknown user


	3 types of permissions
	---------------------

				file			directory
	===========================================================
	read(r)			cat file		ls
				vi file
	-----------------------------------------------------------
	write(w)		vi file			cat>, cat>>,
				cat>>file		vi file, rm,
				(does not mean		cp, mv, mkdir,
				rm on it)		rmdir
	-----------------------------------------------------------
	execute(x)		run it as a 		cd directory
				command /script		[ enter into it]
	-----------------------------------------------------------

	chmod command is used to change the mode of the file/directory

				permissions
					|
			-----------------------------------
			|				|
			character			octal
			r				4
			w				2
			x				1
							0
			----				----
			rwx				7
			rw-				6
			r-x				5
			--x				1
			-wx				3
			---				0
			flexible			efficient
			-tune				-overlap


		chmod u-r uranus.txt		chmod 4 uranus.txt [ 004 ]








	ls -l


	-rw-r--r-- 1 user user   0 Aug 28 05:45 2024-08-27-terminal-2.term
	-rw-r--r-- 1 user user 176 Aug 27 07:25 abc.txt
	drwxr-xr-x 2 user user   3 Aug 27 05:28 myfolder
	drwxr-xr-x 2 user user   3 Aug 27 05:33 myfolder2
	drwxr-xr-x 2 user user   3 Aug 27 05:30 myfolder3
	drwxr-xr-x 4 user user   8 Aug 28 05:29 office
	-rw-r--r-- 1 user user  62 Aug 27 07:27 pqr.txt
	-rw-r--r-- 1 user user 106 Aug 27 05:32 ura.txt
	-rw-r--r-- 1 user user 106 Aug 27 05:31 uranus.txt
	-rw-r--r-- 1 user user   0 Aug 27 04:46 venus
	|||||||||| |    |    |   |    |           |
	|uuu|||||| link Owner| size mod-time  file/directory
	|   ggg||| count   group
	|      ooo	
	type 
	of the
	file
	- regular file
	d directory
	l soft link
	b block device
	c character device
	p socket [ pipe ]


	

1. read file

	cat > peter.txt
		some data
	^d

	chmod u-r peter.txt

	cat peter.txt -- permission denied

	chmod u+x peter.txt

	cat peter.txt <----allowed


2. write to a file

	chmod u-w peter.txt

	cat >> peter.txt -- permission denied

	vi peter.txt --- can read, but cant write
			 if the folder owned by the same owner of the file
			 then :wq! can override the missing write permission
			 - other users are not allowed to do the same

	rm peter.txt -- allowed only if the enclosing folder has the w permission


3. execute a file

	cat myscript.sh
		cal
		date
		echo "hello"
	^d


	try to run file as if a command

	./myscript.sh <- denied to run

	chmod u+x myscript.sh

	./myscript.sh <-- running

------------------
4. read a folder
	
	mkdir project
	cat > project/a
	cat > project/b

	ls -ld project -- to see the permissions

	chmod u-r project

	ls -l project <-- denied to read the folder

5. write to a folder

	chmod u-w project

	now u cannot create any file/subfolder in side project folder

	chmod u+x project --- all changes possible inside this folder


6. execute a folder

	chmod u-x project

	cd project <-- permission denied to enter into this folder



Try octal permissions now


			always overalap the existing permissions

			
umask
		user mask

	umask is used to tune the default permissions


	umask is applied to both the file and directory
 

				file		directory
			----------------------------------------		
		BASE		6  6  6		7  7  7 
	
		UMASK		0  2  2		0  2  2
			----------------------------------------
		DEFAULT		6  4  4         7  5  5
				rw-r--r--	rwxr-xr-x

				file		directory
			----------------------------------------		
		BASE		6  6  6		7  7  7 
	
		UMASK		0  6  6		0  6  6
			----------------------------------------
		DEFAULT		6  0  0         7  1  1
				rw------	rwx--x--x


	assignment : tune the umask in such a way to acquire
			the EXECUTE permission on a file for any user level [ u/g/o]


				file		directory
			----------------------------------------		
	bit	BASE		110 110 110	111 111 111 
				
   &	bit	~UMASK		010 010 010     010 010 010
			----------------------------------------
		DEFAULT		010 010 010 	010 010 010
				-w- -w- -w- 	


		     user	
		      |group
		      ||other
		      |||
		chmod 000 file/directory
		      754
		      |||
		    rwx|r--
		      r-x
		
------------------------------------





	File links

		link = connection between two entities

		A <-----> B
		|	  |
		file1	file2

			

	Soft link					Hard Link
	|						|
	1. symbolic link				Hard Link
	2. sym link					-
	3. short cut in windows


			ThisPC
			|
		-------------------
		|
		C
		|
	------------------
	|	|
	Users
	|
	Amit
	|
	----------------------------------
	|		|		|
	Documents	Downloads	Desktop
	|				sal.txt <== short cut file.lnk
	office
	|
	---------
	|
	inbox
	|
	bank
	|
	salary.xtt



		Soft link
		-----------
		1. it is an extra file
		2. it holds the TARGET PATH of a file or a directory
		3. the size of a softlink is equal to the number of characters
		   in the TARGET PATH
		4. a soft link to a file - operate all file commands over it
		5. a soft link to a directory - operate all directory commands over it
		6. if a TARGET is lost or renamed, then the soft link is broken
		7. on restoring the TARGET, the softlink is also restored
		8. on deletion of softlink, TARGET remain safe

		9. ln -s office/outbox/vendors  
			in above command the soft link name is missing
			hence it would carry the leaf node name as of the soft linkname
			ie vendors <-- would be the soft linkname

		10. if soft links are moved from one location to other location, they
		    are broken, hence use ABSOLUTE PATH ( with / ) for portable links
		11. soft link can point across the partition
			eg. /Volumes/NO_NAME/SSPY/Arpan <-- is a folder on USB DRIVE

		ln -s /Volumes/NO_NAME/SSPY/Arpan devotion
			devotion is a soft link pointing to the USB DRIVE's FOLDER

			if the USB is ejected, softlink is broken
			
			

			/
			|
			home
			|
			user
			|
		-----------------
		|
		heart
		|	ln -s heart heart/heart
		|	ln -s /home/user/heart  heart/hrt
		|
		l heart -> heart
		l hrt   -> /home/user/heart



			/
			|
		-------------------
		|
		home
		|
		user
		|
		------------------
		|		|
		office		soft link file name is here
		|		ln -s  office/inbox/bank/icici.txt  mybank.txt
	-----------------	|
	|			cat mybank.txt
	inbox			ln -s office/inbox/projects projs
	|
	-----------
	|	|
	bank	projects
	|	
	icici.txt



	pwd -P <-- shows the actual [P]hysical folder

	



	Hard link
	-----------

		- nothing to do with soft link

		- hard link is NOT an extra file

		- it shares the same i node of the existing file

		- hard link does not work for folders

		- hard cannot span file system

		- hard link has no concern to the TARGET PATH, but with the inode
		- soft link has something to do with the TARGET PATH and not the inode
			

			/
			|
		--------------------
			|
			home
			|		
		----------------
		|		|
		rajesh		ramesh
		|		|
		data.txt	data.txt
		rwxr-xr-x	rwxr-xr-x


	ln /home/rajesh/data.txt /home/ramesh/data.txt


-------------------------------------------------

Various Filters


	Filter = convert the output of a command into an input 
		to another command


	1. >    output

		cat > filename
		always overwrite the existing file

	2. >>	append

		cat >> filename
			append new line at the end of the file

	3. <	input
		
		cat < filename
		mail peter
				

	4. |	conversion
	
		cmd1 | cmd2

		convert the output of cmd1 as an input to cmd2
		and ultimate output of cmd2 is produced



	1. wc

		line count
		word count
		character count


		info ls > newfile.txt
		wc newfile.txt

		wc -l
		wc -w
		wc -c

		ls -l | wc -l

		name="chandrashekhar"
		echo $name | wc -l

		para="hello
		hi
		how are you"

		echo "$para" | wc -l

	2. head

		extract top 10 lines - by default - from a file/input
		- oldest log can be seen 
	
		head -n 5 newfile.txt
		cat -n newfile.txt | head 
		cat -n newfile.txt | head -n 5
		cat -n newfile.txt | head -n 15

		- ls -ltr | head -n 5


	3. tail
		
		extract bottom 10 lines - by default - from a file/input
		- latest log can be seen 
	
		tail -n 5 newfile.txt
		cat -n newfile.txt | tail 
		cat -n newfile.txt | tail -n 5
		cat -n newfile.txt | tail -n 15

		- ls -ltr | tail -n 5


	4. tr

		translate characters

		tr a x
		tr abc xyz
		tr abcdefg xyz
		
		tr abc xyz < emp.lst

	5. cut

		cut the file vertically

		default delimiter is TAB

		cut -f 1 salary.txt
		cut -f 1,2,5 salary.txt

		cut -d "|" -f1 emp.lst

			-d to specity custom delimiter

		
		ls -l | cut -d  " " -f1

		ls -l | tr -s  " " | cut -d  " " -f1,9

		ls -l | tr -s " " | cut -d " " -f1,9 | tail -n 1
		ls -l | tr -s " " | cut -d " " -f1,9 | tail -n 1 | cut -d " " -f1
  		ls -l | tr -s " " | cut -d " " -f1,9 | tail -n 1 | cut -d " " -f2
  		PERM=`ls -l | tr -s " " | cut -d " " -f1,9 | tail -n 1 | cut -d " " -f1`
  		FILE=`ls -l | tr -s " " | cut -d " " -f1,9 | tail -n 1 | cut -d " " -f2`
  		echo Permission of $FILE is $PERM

	6. grep

		global "regular expression" print


		grep manager emp.lst
		grep gupta emp.lst
		grep man emp.lst
		
		line begin with man
		grep "^man" emp.lst

		word begin with man
		grep "\<man" emp.lst

		word end with man
		grep "man\>" emp.lst

		grep "\<gupta" emplst
		grep "gupta\>" emp.lst

		whole word
		grep "\<gupta\>" emp.lst
		
		with option -w - whole word
		grep -w gupta emp.lst

		ignore case
		grep -i gupta emp.lst

		ignore case with whole word
		grep -iw gupta emp.lst
		


		line number of the found pattern
		grep -n man emp.lst

		count of lines across which the pattern is found
		grep -c man emp.lst

		show only the pattern if found
		grep -o man emp.lst

		grep -o man emp.lst | wc -l


		SOUNDs same - but spelling is different

		1234567
		sax ena
		saksena

		sa[xk]s*ena


		s* means character preceeding * should be matched
		ZERO or more times


		12 3 4 5 6 7 8
		ag a r   w a l
		ag g a r w a l
		ag r a   w a l

		ag[agr][ra]r*wal



	grep		fgrep			egrep
==================================================================
	sa[kx]s*ena	-			"sa(ks|x)ena" 
			
------------------------------------------------------------------
	g.m.		g.m.			-
	|		|
	will search	search g.m.
	g.m. and	as it is
	game too	(literal)

------------------------------------------------------------------
	grep -e sharma	-			egrep "sharma|gupta"
	-e gupta 
	emp.lst
------------------------------------------------------------------
	



















	fgrep - fixed string grep

		grep g.m. emp.lst -- searches game too

		grep g\.m\. emp.lst





	H/w
	|
	Kernel
	|
	Shell <-- interactive program 
	|		(like a web browser to surf on the internet)
	User - english
	  - ls
	  - date
 	  - cal


		Stephen Bourne - The Bourne shell

		/bin/sh


		David Korn - The Korn Shell

		/bin/ksh

		Bill Joy - The C Shell

		/bin/csh


		The Bourne Again Shell

		/bin/bash




	Shell Environement 		



		env				set
		|				|
		global env			local env
		of the system			of the current user

						A=100
						export A
		after export A
		the variable A
		is in env and 
		set too





		$ <-- this is your current shell
		$ A=100 <-- this variable is in the current shell
		$
		$ bash <-- after hitting this line, a new bash (child)
				is created 

		$ now you are in a child shell, where A=100 is unavailable

		
 ps - process status - same as task manager in windows


	echo $$ -- means the current process id [ active ]

		

	1. ps
	2. echo $$
	3. echo $SHLVL
	4. A=100




				server - init - 0
				|		|
				|		sshd - server process
				|		  100
				|
		------------------------------------
		|		|		|
		terminal1	terminal2	terminal3
		|client sshd	|client sshd	| client sshd
		|  100		| 100		| 100 <-- ppid
		|  300		| 400		| 500 <-- pids
		|		|		|
		login		login		login
		user/pass	user/pass	user/pass
		|profile	|profile	|profile
		| A=100
		shell		shell		shell
		 300		400		500
		 600		700		800 <-- pid
		A=10		A=20		A=30



	SCRIPTING				PROGRAMMING LANGUAGE
	-----------				-------------
	  X					C   prog language
	  X					C++ prog lang
	 Java Scripting				java prog lang
	 Unix shell scripting			X
	 perl scripting				X		
	 PL-SQL Scripting			X

	1. NA					1. rich set of data types
	2. NA					2. rich set of operators
	3. filters 				3. rich set of library functions
	4. very few				4. complex math expression	
	5. no gui				5. GUI 
	6. NA					6. data structures, array
						   classes, struct, stack
						   queue, tree, hashtable,
						   graph
	7. NA					7. Algorithms
	8. NA					8. efficient file handling
	9.					9. mission critical apps
	10.control the developed apps		10. develop

						wc.c
						grep.c
						cut.c
						head.c
						logic.c
	wc
	grep
	head
	upload
	start a server
	stop a particular service
	prevent this
	prevent that
	scan this 
	..
	..
	..




	
	Shell Scripting
	-------------------


	scripting is used for automation



	write a simple script to enter a filename
	and display all the hard links of it


	cat > rajesh
	 data
	^d

	ln rajesh raj
	ln rajesh raja

	-------

	Enter filename : rajesh
	Following are the hard links of rajesh
	raj
	raja
	


	Ways to run the script


	1. ./First.sh
		a. spawns a new shell

	2. . ./First.sh
		a. DOES NOT spawns a new shell

	3. /etc
	   /home/user/First.sh
		a. spawns a new shell

	4. /etc
	   . /home/user/First.sh
		a. DOES NOT spawns a new shell


Command line arguments
-----------------------


	Passing parameters to the script at runtime


		   <--------$*------->
	$ First.sh jack jane 120 45.55
	    $0	    $1   $2   $3  $4
		    <-- count is $#-->



Functions
-----------

	- reusable code

	
C/C++/Java
	returnType	functioName(arguments)
	{
		return value;
	}

Unix
-----
	function functionName()
	{
		code


	}

	functionName






	SED - stream editor - to perform CRUD operation 
		without opening file in interactive mode


	vi			grep			sed
	|			|			|
create	vi emp.lst		NO			YES
read	vi emp.lst		sharma			/sharma
update	vi emp.lst		NO			YES
delete	vi emp.lst		NO			YES
	|			|			|
	INTERACTIVE/DEPENDS			NON-interactive
	UPON USER'S ACTIVE			program / so that
	INPUT					 it can be used
						without user's 
						presence/scripts can
						use it



	sed 'action' filelist

		- line processor

SEARCH LINES

	1)	sed '' emp.lst
		
			- if no action provided inside '' then
			- default action is to p - print

	2) sed 'p' emp.lst

			- default print + 'p' explicit p 

	3) sed '5p' emp.lst

			- default print for all lines
			- + 5p means 5th line also to be printed

	4) sed -n '5p' emp.lst

			- -n would ignore the default print [ supress it ]
			- '5p' getting only line 5

			head -n 5 emp.lst | tail -n 1

	5) sed -n '3,5p' emp.lst

			- print lines from 3 to 5 

	6) sed -n -e '5p' -e '7p' -e '10p' emp.lst
	6) cat -n emp.lst | sed -n -e '5p' -e '7p' -e '10p' 
	6) cat -n emp.lst | sed -n -e '2p' -e '5,7p' -e '10p' -e '$p' 


SEARCH PATTERN

	7) sed -n '/sharma/p' emp.lst
	8) sed -n -e '/manager/p' -e '/gupta/p' -e '/sharma/p' emp.lst

DELETE by PATTERN or LINE range

	9) sed -n '/manager/d' emp.lst <-- delete pattern matched lines
	10) sed -n '5,8d' emp.lst
	11) cat -n emp.lst | sed -n '5,8d' <-- delete ranged lines
	12) cp emp.lst emp.lst.1

	13) sed -i.bak '5,8d' emp.lst
			emp.lst.bak would have old records
			emp.lst would have 5,8 deleted from it(updated)

APPEND DATA
	
	14) sed '1a \
		111|sachin t|cricketer|cricket|12/Dec/99|8888\
		' emp.lst
		goes to the first line and add the above record
		as a 2nd record

	sed '$a \
		111|sachin t|cricketer|cricket|12/Dec/99|8888\
		' emp.lst
		goes to the last line and appends the above record

INSERT DATA

	sed '1i \
		111|sachin t|cricketer|cricket|12/Dec/99|8888\
	    ' emp.lst

		goes to the 1st record, and inserts the above
		data above the 1st record

	sed -i '1i \
		111|sachin t|cricketer|cricket|12/Dec/99|8888\
	    ' emp.lst

		above -i is the OPTION - to update the file
		1i is an action


	sed '/director/w dir1.lst' emp.lst

		searches director and writes them to a file dir1.lst

	CRUD operation is over.....

	so lets write a script to SHOW a MENU


		USER MANAGEMENT
		----------------
		1. Create User
		2. View User By ID
		3. View All Users
		4. Modify User
		5. Delete User By ID
		-----------------
		6. Exit	

	
	
alias -- to view all the aliases	
-------------
alias c='clear'
alias ll='ls -l'
alias lsd='ls -l | grep ^d'
alias lsl='ls -l | grep ^l'

unalias c ---- revoke the alias



 ls -l script.sh
  rw- --- --- <--- no execute permission - NO NEED OF AUTHENTICATION

 bash script.sh <-- still we can run this without x perm

 script.sh
	|
	if [ $UID -ne 0 ]
	then
		echo "only root can run this.."
		exit
	fi
	..
	..
	..
	..





	first.c
	|
	gcc -c first.c
			|
		  first.o <-- its an object file after the compilation
			|
	gcc -o first.out first.o
			|
		it is an executable file generated from first.o
				|
			no need to grant x permission since it is auto
			granted by the gcc compiler and not the unix OS

	./first.out
		|
		rename it
	mv first.out first
				|
				./first
					|
				chmod ugo-x first
				|
				./first <-- permission denied
EXECUTABLENESS OF AN EXECUTABLE FILE CAN BE SWITCHED OFF













	








	





































































		
	






























