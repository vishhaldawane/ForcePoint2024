


			Unix Shell Scripting


 Day1 Agenda :

	1. Introduction to Unix/Linux
	2. The Big picture
	2.1) features of unix
	3. Getting around the system
	4. Basic commands to deal with Files
	5. Basic commands to deal with directories
	6. The Vi editor

Day2 Agenda :
	6. Carry forward the VI editor
	7. File permissions
	8. File Links
		soft and hard link
	9. Various filters
		10 filters




			Unix

	UNIplexed computing system
	|			|
	single			|
	machine			|
		----------------------------------
		|		|		|
		hardware	software	peopleware
		yantra		tantra		mantra
		|		|		|
	abundance 		huge set	millions 
	|			of apps
	CPU 32/64/128
	HDD 64/128/256TB
	MEMORY 64gb

	1,20,000 users
	in a second
	on IBM 


				SCO-UNIX
				| SYS III / IV / V
				| Ken Thompson
				|
		-----------------------------------------------------------------
		|		|		|		|		|
vendor		IBM		Sun/Oracle	Hp		apple		any
CPU		blackbox	SunFire/SPARC	hpseries	PowerPc		any
Os		AIX		Solaris		hp-ux		Macintosh	Linux
Kernel		Kernel(asm)							|
Shell		bash(C)	
		|		uname		uname		uname		uname
		uname
		ls		ls		ls		ls		ls
		


	Linus Torvalds 

			redhat		mandrake 	suse/linux
			|			caldera		..50
		------------------
		|		|
		linux		fedora
				..
				..
				ubuntu

Features of unix
1. Portable
2. Multiuser ( it is not a desktop/single user os)

			box
			|CPU/HDD/RAM
			|kernel is here
			|
		-----------------------------------
		|nic	|nic	|nic	|nic	|nic
		|bash	|bash	|bash	|bash	|bash
		monitor	mon	mon	mon	mon
		key	key	key	key	key
		|
		ls
3. Mutlitasking
4. Multiprocessing
5. Robust
6. 100% secured
	rwx

	in windows we cannot disable the executable ness of an executable file

		paint.exe

	chmod -x paint.out
7. multithreaded
8. Distributed



	Unix users


	1. Power User
		known as 'root' user [ administrator in windows ]
		prompt - #
		never try to login as root unless u have the password
		
	2. End user
		like any other non-root user
		prompt - $
	

uname
	uname -o
	uname -k
	uname -i
	uname -r

cal
cal -3
cal -y
ncal -M
ncal -S
cal 2 2005
cal 2024
pwd - print working directory
touch jupitor - make empty file [ if doent exist ]
mkdir myfolder 
rm jupitor [ remove a file ]
rmdir myfolder [ remove empty folder ]
date
date '+%D'



File related commands


	a. create a file

		cat > filename  [ file name must be new one ]
		data			else it would overwrite
		data			without prompt
		data
		^d

	b. view the content of the file

		cat filename

		
	c. rename the file

		mv oldname newnamme

	d. move a file

		mv sourcefile  newlocation/

	e. copy a file

		cp sourcefile newcopyName
		cp sourcefile newLocation/

	f. remove a file

		rm filename
		

Directories
--------------

	a. create a directory

		mkdir directoryname

	b. enter into the directory

		cd directoryname

	c. exit one level up
		
		cd .. [ with a space ]

	d. remove a directory

		rmdir directoryname [ it must be empty ]

		rm -rf directory [ force remove a directory ]
				  -r recursive content 

	e. rename a directory

		mv oldname newname

	f. move a directory

		mv directory newLocation/

	g. copy a directory

		cp -r directory newLocation/
	

				office
				|
			-----------------
			|		|
			inbox		outbox
			|		|
		--------------		-------------------
		|	    |		|		|
		bank	  project	vendors		suppliers




	
Unix file system structure [ internatinal standard structure ]



				/
				|
	-----------------------------------------------------------------------------------
	|	|	|	|	|	|	|	|	|	|	|
	bin	usr	sbin	etc	var	opt	tmp	lib	dev	proc	root
		|
	-------------
	|	|
	bin	sbin


1. / <-- root directory
-----------------------------
2. /bin		binaries [ executables ]
3. /sbin	system level [ single user ] binaries
4. /usr/bin	binaries [ large number ]
5. /usr/sbin	binaries [ large number ]
--------------------
6. /etc		editable text configuration
7. /var		variable data, logs, mails, spools, jobs
8. /opt		third party software /opt/java/bin/javac, /opt/oracle/bin/sql
9. /tmp		dumping ground
-----------------
10./lib		libraries [ .so files ] - same as windows DLL
11./dev		device drivers here
-----------------
12. /proc	running processes here
13. /root	home directory of admin[ root ] user
14. /home/user	home directories of all end users



	EXE project	DLL project
	|		|
	excel.c		formulas.c
	|main()	{}	|50 funs
	--------------------
	|		|
	.obj		.obj
	|		|
	.exe		.dll
	|4kb		|1mb
	run		DOESNT RUN, rather
	in		it stays on 
	RAM		HDD

	sum(A10..A30)


	OUT project	SO Project
	|		|
	excel.c		formulas.c
	|		|
	.o		.o
	|		|
	.out		.so [ shared object ]



Vi editor
--------------


	visual editor

	vim = visual improved


	$ vi --> open a blank file
	
	$ vi abc.txt -> if the file doesnt exists, it would open it as a new one


	$ vi pqr.txt -> existing file, then open teh content for editing


	vi has various MODES, default mode is the COMMAND MODE


	$ vi
	+---------------> COMMAND MODE
	|			|
	|     [aio]------------------[:]------------------
	|	|		      |
	|	|		      |
	Esc	InsertMODE	Last Line/Ex Mode
	

	$ vi

		1. command mode
		2. press i -> insert mode
		3. type data
		4. press ESC -> command mode
		5. :w abc.txt [ save as ]
		6. :q to quit vi

	$ vi pqr.txt

		1. command mode
		2. press i
		3. edit/add the lines
		4. press ESC
		5. :wq -- write and quit vi


	$ vi pqr.txt

		1. command mode
		2. press i
		3. edit/add the lines
		4. press ESC
		5. :q! -- discard the changes and quit vi
			
	
	i -- enter into insert mode

	: -- enter into last line mode

	Esc - goback to command mode from any other mode




	:set number - enable line numbers
	:set nonumber - disable it

	:500
	:1
	:$ --- go to the last line

	w - goes to the beginning of every successive word in forward direction
	e - goes to the end of every successive word in forward direction
	
	b - goes to the beginning of every successive word in backward direction

	50w - goes in the foward to the 50th word from the current cursor

	dw - deletes the current word
	5dw - delete 5 words from the cursor

	dd - delete the current line
	5dd - delete 5 lines

	u - to undo the last action
	5u - to undeo last 5 action

		copy			cut
		|			|
	char    y			x
	3chars	3y			3x
	word	yw			dw
	3word	3yw			3dw
	line	yy			dd
	3 lines	3yy			3dd
		|			|
		------------------------
			   |
	paste		   p
     5 time paste         5p



Search a word
---------------

		/wordToSearch  - searches a word in forward direction

		?wordToSearch - searches a word in backward direction

		whole word search

		/the <-- searches the word everywhere

		/^the	<-- searches at the start of the line

		/\<the\>

		n - searches the next occurance
		N - searches the prev occurance

		

		:set hls <-- highlight selection on

Search and Replace
--------------------

		first decide what to replace
			and from what region [ line or range of lines ]
			and first occurence or multiple occurences


		:s/a/A


		:s means substitute [ replace ]
		/a -- search string a
		/A -- to replace with this string

		if line number not given then current line is considered
		if occurences not given, then only first occurence would be done


		:s/a/A -- replace a with A on the current line first occurence
		:12s/a/A - 12th line, first occurence
		:12s/a/A/g - 12th line, all occurences

		:5,12s/a/A - replace all a with A from line 5 to 12 first occurence
		:5,12s/a/A/g - replace all a with A from line 5 to 12 all occurences


		:1,$s/a/A   - complete document for the first sccurence
		:1,$s/a/A/g - complete document for all the occurences



		:%s/a/A   - complete document for the first sccurence
		:%s/a/A/g - complete document for all the occurences
	
		:%s/a/A/gc 
			c - confirmation

			y	n	a	q	l
			|	|	|	|	|
			do	NO	all	quit	do the current replacement
							and leave it

			^E ^Y -- to scroll up and down
			scroll facility is given to discriminate the 
			replacement decisions based on unseen lines



	File permissions
	-------------------
			Basic security model

	3 types of users
	-----------------
	user - owner of the file/directory denoted via - u
	group - logical collection of trusted user(s) -  g
	other - neither the user nor the group member -  o

	every user has a primary group

	and a user can belong to multiple secondary groups

	other is risky, any internet user, unknown user


	3 types of permissions
	---------------------

				file			directory
	===========================================================
	read(r)			cat file		ls
				vi file
	-----------------------------------------------------------
	write(w)		vi file			cat>, cat>>,
				cat>>file		vi file, rm,
				(does not mean		cp, mv, mkdir,
				rm on it)		rmdir
	-----------------------------------------------------------
	execute(x)		run it as a 		cd directory
				command /script		[ enter into it]
	-----------------------------------------------------------

	chmod command is used to change the mode of the file/directory

				permissions
					|
			-----------------------------------
			|				|
			character			octal
			r				4
			w				2
			x				1
							0
			----				----
			rwx				7
			rw-				6
			r-x				5
			--x				1
			-wx				3
			---				0
			flexible			efficient
			-tune				-overlap


		chmod u-r uranus.txt		chmod 4 uranus.txt [ 004 ]








	ls -l


	-rw-r--r-- 1 user user   0 Aug 28 05:45 2024-08-27-terminal-2.term
	-rw-r--r-- 1 user user 176 Aug 27 07:25 abc.txt
	drwxr-xr-x 2 user user   3 Aug 27 05:28 myfolder
	drwxr-xr-x 2 user user   3 Aug 27 05:33 myfolder2
	drwxr-xr-x 2 user user   3 Aug 27 05:30 myfolder3
	drwxr-xr-x 4 user user   8 Aug 28 05:29 office
	-rw-r--r-- 1 user user  62 Aug 27 07:27 pqr.txt
	-rw-r--r-- 1 user user 106 Aug 27 05:32 ura.txt
	-rw-r--r-- 1 user user 106 Aug 27 05:31 uranus.txt
	-rw-r--r-- 1 user user   0 Aug 27 04:46 venus
	|||||||||| |    |    |   |    |           |
	|uuu|||||| link Owner| size mod-time  file/directory
	|   ggg||| count   group
	|      ooo	
	type 
	of the
	file
	- regular file
	d directory
	l soft link
	b block device
	c character device
	p socket [ pipe ]


	

1. read file

	cat > peter.txt
		some data
	^d

	chmod u-r peter.txt

	cat peter.txt -- permission denied

	chmod u+x peter.txt

	cat peter.txt <----allowed


2. write to a file

	chmod u-w peter.txt

	cat >> peter.txt -- permission denied

	vi peter.txt --- can read, but cant write
			 if the folder owned by the same owner of the file
			 then :wq! can override the missing write permission
			 - other users are not allowed to do the same

	rm peter.txt -- allowed only if the enclosing folder has the w permission


3. execute a file

	cat myscript.sh
		cal
		date
		echo "hello"
	^d


	try to run file as if a command

	./myscript.sh <- denied to run

	chmod u+x myscript.sh

	./myscript.sh <-- running

------------------
4. read a folder
	
	mkdir project
	cat > project/a
	cat > project/b

	ls -ld project -- to see the permissions

	chmod u-r project

	ls -l project <-- denied to read the folder

5. write to a folder

	chmod u-w project

	now u cannot create any file/subfolder in side project folder

	chmod u+x project --- all changes possible inside this folder


6. execute a folder

	chmod u-x project

	cd project <-- permission denied to enter into this folder



Try octal permissions now


			always overalap the existing permissions

			
umask
		user mask

	umask is used to tune the default permissions


	umask is applied to both the file and directory
 

				file		directory
			----------------------------------------		
		BASE		6  6  6		7  7  7 
	
		UMASK		0  2  2		0  2  2
			----------------------------------------
		DEFAULT		6  4  4         7  5  5
				rw-r--r--	rwxr-xr-x

				file		directory
			----------------------------------------		
		BASE		6  6  6		7  7  7 
	
		UMASK		0  6  6		0  6  6
			----------------------------------------
		DEFAULT		6  0  0         7  1  1
				rw------	rwx--x--x


	assignment : tune the umask in such a way to acquire
			the EXECUTE permission on a file for any user level [ u/g/o]


				file		directory
			----------------------------------------		
	bit	BASE		110 110 110	111 111 111 
				
   &	bit	~UMASK		010 010 010     010 010 010
			----------------------------------------
		DEFAULT		010 010 010 	010 010 010
				-w- -w- -w- 	


------------------------------------





	

















	

		
	


 











































